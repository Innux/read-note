定义函数的方式有两种：
  1.函数声明 
    function fuc(x, y) {}
  2.函数表达式
    var fuc = function(x, y) {}

关于函数声明，一个重要特征就是 #函数声明提升#，意思是在执行代码之前会先读取函数声明。因此可以在函数声明之前调用它。

arguments.callee是一个指向正在执行的函数的指针，可以用来实现对函数的递归调用

闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式就是在一个函数内部创建另一个函数

作用域链本质上是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。

在另一个函数内部定义的函数会将包含函数（外部函数）的活动对象添加到它的作用域链中。

// result里都是10 因为每个函数的作用域链中都保存着createFunc()函数的活动对象
function createFunc() {
  var res = new Arrary()
  for(var i = 0; i < 10; i++) {
    result[i] = function() {
      return i
    }
  }
  return result
}
// 通过创建另一个匿名函数强制让闭包的行为符合预期
function createFunc() {
  var res = new Array()
  for(var i = 0; i < 10; i++) {
    result[i] = function(num) {
      return function() {
        return num
      }(i)
    }
    return result
  }
}

this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。
不过，匿名函数的执行环境具有全局性，因此其this对象通常指向window